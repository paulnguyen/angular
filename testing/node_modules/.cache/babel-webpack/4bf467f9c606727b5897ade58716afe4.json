{"ast":null,"code":"/*\n* Mock async observables that return asynchronously.\n* The observable either emits once and completes or errors.\n*\n* Must call `tick()` when test with `fakeAsync()`.\n*\n* THE FOLLOWING DON'T WORK\n* Using `of().delay()` triggers TestBed errors;\n* see https://github.com/angular/angular/issues/10127 .\n*\n* Using `asap` scheduler - as in `of(value, asap)` - doesn't work either.\n*/\nimport { defer } from 'rxjs';\n/**\n * Create async observable that emits-once and completes\n * after a JS engine turn\n */\n\nexport function asyncData(data) {\n  return defer(() => Promise.resolve(data));\n}\n/**\n * Create async observable error that errors\n * after a JS engine turn\n */\n\nexport function asyncError(errorObject) {\n  return defer(() => Promise.reject(errorObject));\n}","map":{"version":3,"sources":["/Users/paulnguyen/Desktop/SRC/angular/testing/src/testing/async-observable-helpers.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;AAWE;AACF,SAAS,KAAT,QAAsB,MAAtB;AAEA;;;AAGG;;AACH,OAAM,SAAU,SAAV,CAAuB,IAAvB,EAA8B;AAClC,SAAO,KAAK,CAAC,MAAM,OAAO,CAAC,OAAR,CAAgB,IAAhB,CAAP,CAAZ;AACD;AAED;;;AAGG;;AACH,OAAM,SAAU,UAAV,CAAwB,WAAxB,EAAwC;AAC5C,SAAO,KAAK,CAAC,MAAM,OAAO,CAAC,MAAR,CAAe,WAAf,CAAP,CAAZ;AACD","sourcesContent":["/*\n* Mock async observables that return asynchronously.\n* The observable either emits once and completes or errors.\n*\n* Must call `tick()` when test with `fakeAsync()`.\n*\n* THE FOLLOWING DON'T WORK\n* Using `of().delay()` triggers TestBed errors;\n* see https://github.com/angular/angular/issues/10127 .\n*\n* Using `asap` scheduler - as in `of(value, asap)` - doesn't work either.\n*/\nimport { defer } from 'rxjs';\n\n/**\n * Create async observable that emits-once and completes\n * after a JS engine turn\n */\nexport function asyncData<T>(data: T) {\n  return defer(() => Promise.resolve(data));\n}\n\n/**\n * Create async observable error that errors\n * after a JS engine turn\n */\nexport function asyncError<T>(errorObject: any) {\n  return defer(() => Promise.reject(errorObject));\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}