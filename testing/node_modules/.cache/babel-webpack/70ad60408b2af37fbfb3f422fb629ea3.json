{"ast":null,"code":"import { fakeAsync, TestBed, tick, waitForAsync } from '@angular/core/testing';\nimport { asyncData, asyncError } from '../../testing';\nimport { of, throwError } from 'rxjs';\nimport { last } from 'rxjs/operators';\nimport { TwainComponent } from './twain.component';\nimport { TwainService } from './twain.service';\ndescribe('TwainComponent', () => {\n  let component;\n  let fixture;\n  let getQuoteSpy;\n  let quoteEl;\n  let testQuote; // Helper function to get the error message element value\n  // An *ngIf keeps it out of the DOM until there is an error\n\n  const errorMessage = () => {\n    const el = fixture.nativeElement.querySelector('.error');\n    return el ? el.textContent : null;\n  };\n\n  beforeEach(() => {\n    testQuote = 'Test Quote'; // Create a fake TwainService object with a `getQuote()` spy\n\n    const twainService = jasmine.createSpyObj('TwainService', ['getQuote']); // Make the spy return a synchronous Observable with the test data\n\n    getQuoteSpy = twainService.getQuote.and.returnValue(of(testQuote));\n    TestBed.configureTestingModule({\n      declarations: [TwainComponent],\n      providers: [{\n        provide: TwainService,\n        useValue: twainService\n      }]\n    });\n    fixture = TestBed.createComponent(TwainComponent);\n    component = fixture.componentInstance;\n    quoteEl = fixture.nativeElement.querySelector('.twain');\n  });\n  describe('when test with synchronous observable', () => {\n    it('should not show quote before OnInit', () => {\n      expect(quoteEl.textContent).toBe('', 'nothing displayed');\n      expect(errorMessage()).toBeNull('should not show error element');\n      expect(getQuoteSpy.calls.any()).toBe(false, 'getQuote not yet called');\n    }); // The quote would not be immediately available if the service were truly async.\n\n    it('should show quote after component initialized', () => {\n      fixture.detectChanges(); // onInit()\n      // sync spy result shows testQuote immediately after init\n\n      expect(quoteEl.textContent).toBe(testQuote);\n      expect(getQuoteSpy.calls.any()).toBe(true, 'getQuote called');\n    }); // The error would not be immediately available if the service were truly async.\n    // Use `fakeAsync` because the component error calls `setTimeout`\n\n    it('should display error when TwainService fails', fakeAsync(() => {\n      // tell spy to return an error observable\n      getQuoteSpy.and.returnValue(throwError('TwainService test failure'));\n      fixture.detectChanges(); // onInit()\n      // sync spy errors immediately after init\n\n      tick(); // flush the component's setTimeout()\n\n      fixture.detectChanges(); // update errorMessage within setTimeout()\n\n      expect(errorMessage()).toMatch(/test failure/, 'should display error');\n      expect(quoteEl.textContent).toBe('...', 'should show placeholder');\n    }));\n  });\n  describe('when test with asynchronous observable', () => {\n    beforeEach(() => {\n      // Simulate delayed observable values with the `asyncData()` helper\n      getQuoteSpy.and.returnValue(asyncData(testQuote));\n    });\n    it('should not show quote before OnInit', () => {\n      expect(quoteEl.textContent).toBe('', 'nothing displayed');\n      expect(errorMessage()).toBeNull('should not show error element');\n      expect(getQuoteSpy.calls.any()).toBe(false, 'getQuote not yet called');\n    });\n    it('should still not show quote after component initialized', () => {\n      fixture.detectChanges(); // getQuote service is async => still has not returned with quote\n      // so should show the start value, '...'\n\n      expect(quoteEl.textContent).toBe('...', 'should show placeholder');\n      expect(errorMessage()).toBeNull('should not show error');\n      expect(getQuoteSpy.calls.any()).toBe(true, 'getQuote called');\n    });\n    it('should show quote after getQuote (fakeAsync)', fakeAsync(() => {\n      fixture.detectChanges(); // ngOnInit()\n\n      expect(quoteEl.textContent).toBe('...', 'should show placeholder');\n      tick(); // flush the observable to get the quote\n\n      fixture.detectChanges(); // update view\n\n      expect(quoteEl.textContent).toBe(testQuote, 'should show quote');\n      expect(errorMessage()).toBeNull('should not show error');\n    }));\n    it('should show quote after getQuote (waitForAsync)', waitForAsync(() => {\n      fixture.detectChanges(); // ngOnInit()\n\n      expect(quoteEl.textContent).toBe('...', 'should show placeholder');\n      fixture.whenStable().then(() => {\n        fixture.detectChanges(); // update view with quote\n\n        expect(quoteEl.textContent).toBe(testQuote);\n        expect(errorMessage()).toBeNull('should not show error');\n      });\n    }));\n    it('should show last quote (quote done)', done => {\n      fixture.detectChanges();\n      component.quote.pipe(last()).subscribe(() => {\n        fixture.detectChanges(); // update view with quote\n\n        expect(quoteEl.textContent).toBe(testQuote);\n        expect(errorMessage()).toBeNull('should not show error');\n        done();\n      });\n    });\n    it('should show quote after getQuote (spy done)', done => {\n      fixture.detectChanges(); // the spy's most recent call returns the observable with the test quote\n\n      getQuoteSpy.calls.mostRecent().returnValue.subscribe(() => {\n        fixture.detectChanges(); // update view with quote\n\n        expect(quoteEl.textContent).toBe(testQuote);\n        expect(errorMessage()).toBeNull('should not show error');\n        done();\n      });\n    });\n    it('should display error when TwainService fails', fakeAsync(() => {\n      // tell spy to return an async error observable\n      getQuoteSpy.and.returnValue(asyncError('TwainService test failure'));\n      fixture.detectChanges();\n      tick(); // component shows error after a setTimeout()\n\n      fixture.detectChanges(); // update error message\n\n      expect(errorMessage()).toMatch(/test failure/, 'should display error');\n      expect(quoteEl.textContent).toBe('...', 'should show placeholder');\n    }));\n  });\n});","map":{"version":3,"sources":["/Users/paulnguyen/Desktop/SRC/angular/testing/src/app/twain/twain.component.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { fakeAsync, ComponentFixture, TestBed, tick, waitForAsync } from '@angular/core/testing';\n\nimport { asyncData, asyncError } from '../../testing';\n\nimport { of, throwError } from 'rxjs';\nimport { last } from 'rxjs/operators';\n\nimport { TwainComponent } from './twain.component';\nimport { TwainService } from './twain.service';\n\ndescribe('TwainComponent', () => {\n  let component: TwainComponent;\n  let fixture: ComponentFixture<TwainComponent>;\n  let getQuoteSpy: jasmine.Spy;\n  let quoteEl: HTMLElement;\n  let testQuote: string;\n\n  // Helper function to get the error message element value\n  // An *ngIf keeps it out of the DOM until there is an error\n  const errorMessage = () => {\n    const el = fixture.nativeElement.querySelector('.error');\n    return el ? el.textContent : null;\n  };\n\n  beforeEach(() => {\n    testQuote = 'Test Quote';\n\n    // Create a fake TwainService object with a `getQuote()` spy\n    const twainService = jasmine.createSpyObj('TwainService', ['getQuote']);\n    // Make the spy return a synchronous Observable with the test data\n    getQuoteSpy = twainService.getQuote.and.returnValue(of(testQuote));\n\n    TestBed.configureTestingModule({\n      declarations: [TwainComponent],\n      providers: [{provide: TwainService, useValue: twainService}]\n    });\n\n    fixture = TestBed.createComponent(TwainComponent);\n    component = fixture.componentInstance;\n    quoteEl = fixture.nativeElement.querySelector('.twain');\n  });\n\n  describe('when test with synchronous observable', () => {\n    it('should not show quote before OnInit', () => {\n      expect(quoteEl.textContent).toBe('', 'nothing displayed');\n      expect(errorMessage()).toBeNull('should not show error element');\n      expect(getQuoteSpy.calls.any()).toBe(false, 'getQuote not yet called');\n    });\n\n    // The quote would not be immediately available if the service were truly async.\n    it('should show quote after component initialized', () => {\n      fixture.detectChanges();  // onInit()\n\n      // sync spy result shows testQuote immediately after init\n      expect(quoteEl.textContent).toBe(testQuote);\n      expect(getQuoteSpy.calls.any()).toBe(true, 'getQuote called');\n    });\n\n\n    // The error would not be immediately available if the service were truly async.\n    // Use `fakeAsync` because the component error calls `setTimeout`\n    it('should display error when TwainService fails', fakeAsync(() => {\n         // tell spy to return an error observable\n         getQuoteSpy.and.returnValue(throwError('TwainService test failure'));\n\n         fixture.detectChanges();  // onInit()\n         // sync spy errors immediately after init\n\n         tick();  // flush the component's setTimeout()\n\n         fixture.detectChanges();  // update errorMessage within setTimeout()\n\n         expect(errorMessage()).toMatch(/test failure/, 'should display error');\n         expect(quoteEl.textContent).toBe('...', 'should show placeholder');\n       }));\n  });\n\n  describe('when test with asynchronous observable', () => {\n    beforeEach(() => {\n      // Simulate delayed observable values with the `asyncData()` helper\n      getQuoteSpy.and.returnValue(asyncData(testQuote));\n    });\n\n    it('should not show quote before OnInit', () => {\n      expect(quoteEl.textContent).toBe('', 'nothing displayed');\n      expect(errorMessage()).toBeNull('should not show error element');\n      expect(getQuoteSpy.calls.any()).toBe(false, 'getQuote not yet called');\n    });\n\n    it('should still not show quote after component initialized', () => {\n      fixture.detectChanges();\n      // getQuote service is async => still has not returned with quote\n      // so should show the start value, '...'\n      expect(quoteEl.textContent).toBe('...', 'should show placeholder');\n      expect(errorMessage()).toBeNull('should not show error');\n      expect(getQuoteSpy.calls.any()).toBe(true, 'getQuote called');\n    });\n\n    it('should show quote after getQuote (fakeAsync)', fakeAsync(() => {\n         fixture.detectChanges();  // ngOnInit()\n         expect(quoteEl.textContent).toBe('...', 'should show placeholder');\n\n         tick();                   // flush the observable to get the quote\n         fixture.detectChanges();  // update view\n\n         expect(quoteEl.textContent).toBe(testQuote, 'should show quote');\n         expect(errorMessage()).toBeNull('should not show error');\n       }));\n\n    it('should show quote after getQuote (waitForAsync)', waitForAsync(() => {\n         fixture.detectChanges();  // ngOnInit()\n         expect(quoteEl.textContent).toBe('...', 'should show placeholder');\n\n         fixture.whenStable().then(() => {  // wait for async getQuote\n           fixture.detectChanges();         // update view with quote\n           expect(quoteEl.textContent).toBe(testQuote);\n           expect(errorMessage()).toBeNull('should not show error');\n         });\n       }));\n\n\n    it('should show last quote (quote done)', (done: DoneFn) => {\n      fixture.detectChanges();\n\n      component.quote.pipe(last()).subscribe(() => {\n        fixture.detectChanges();  // update view with quote\n        expect(quoteEl.textContent).toBe(testQuote);\n        expect(errorMessage()).toBeNull('should not show error');\n        done();\n      });\n    });\n\n    it('should show quote after getQuote (spy done)', (done: DoneFn) => {\n      fixture.detectChanges();\n\n      // the spy's most recent call returns the observable with the test quote\n      getQuoteSpy.calls.mostRecent().returnValue.subscribe(() => {\n        fixture.detectChanges();  // update view with quote\n        expect(quoteEl.textContent).toBe(testQuote);\n        expect(errorMessage()).toBeNull('should not show error');\n        done();\n      });\n    });\n\n    it('should display error when TwainService fails', fakeAsync(() => {\n         // tell spy to return an async error observable\n         getQuoteSpy.and.returnValue(asyncError<string>('TwainService test failure'));\n\n         fixture.detectChanges();\n         tick();                   // component shows error after a setTimeout()\n         fixture.detectChanges();  // update error message\n\n         expect(errorMessage()).toMatch(/test failure/, 'should display error');\n         expect(quoteEl.textContent).toBe('...', 'should show placeholder');\n       }));\n  });\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}