{"ast":null,"code":"import { __decorate } from \"tslib\"; // Import patch to make async `HTMLCanvasElement` methods (such as `.toBlob()`) Zone.js-aware.\n// Either import in `polyfills.ts` (if used in more than one places in the app) or in the component\n// file using `HTMLCanvasElement` (if it is only used in a single file).\n\nimport 'zone.js/plugins/zone-patch-canvas';\nimport { Component, ViewChild } from '@angular/core';\nlet CanvasComponent = class CanvasComponent {\n  constructor() {\n    this.blobSize = 0;\n  }\n\n  ngAfterViewInit() {\n    const canvas = this.sampleCanvas.nativeElement;\n    const context = canvas.getContext('2d');\n    context.clearRect(0, 0, 200, 200);\n    context.fillStyle = '#FF1122';\n    context.fillRect(0, 0, 200, 200);\n    canvas.toBlob(blob => {\n      var _a;\n\n      this.blobSize = (_a = blob === null || blob === void 0 ? void 0 : blob.size) !== null && _a !== void 0 ? _a : 0;\n    });\n  }\n\n};\nCanvasComponent.propDecorators = {\n  sampleCanvas: [{\n    type: ViewChild,\n    args: ['sampleCanvas']\n  }]\n};\nCanvasComponent = __decorate([Component({\n  selector: 'sample-canvas',\n  template: '<canvas #sampleCanvas width=\"200\" height=\"200\"></canvas>'\n})], CanvasComponent);\nexport { CanvasComponent };","map":{"version":3,"sources":["/Users/paulnguyen/Desktop/SRC/angular/testing/src/app/shared/canvas.component.ts"],"names":[],"mappings":"oCAAA;AACA;AACA;;AACA,OAAO,mCAAP;AACA,SAAS,SAAT,EAAmC,SAAnC,QAAgE,eAAhE;IAMa,eAAe,GAAA,MAAf,eAAe,CAAA;;AAC1B,SAAA,QAAA,GAAW,CAAX;AAeD;;AAZC,EAAA,eAAe,GAAA;AACb,UAAM,MAAM,GAAsB,KAAK,YAAL,CAAkB,aAApD;AACA,UAAM,OAAO,GAAG,MAAM,CAAC,UAAP,CAAkB,IAAlB,CAAhB;AAEA,IAAA,OAAO,CAAC,SAAR,CAAkB,CAAlB,EAAqB,CAArB,EAAwB,GAAxB,EAA6B,GAA7B;AACA,IAAA,OAAO,CAAC,SAAR,GAAoB,SAApB;AACA,IAAA,OAAO,CAAC,QAAR,CAAiB,CAAjB,EAAoB,CAApB,EAAuB,GAAvB,EAA4B,GAA5B;AAEA,IAAA,MAAM,CAAC,MAAP,CAAc,IAAI,IAAG;;;AACnB,WAAK,QAAL,GAAgB,CAAA,EAAA,GAAA,IAAI,KAAA,IAAJ,IAAA,IAAI,KAAA,KAAA,CAAJ,GAAI,KAAA,CAAJ,GAAA,IAAI,CAAE,IAAN,MAAU,IAAV,IAAU,EAAA,KAAA,KAAA,CAAV,GAAU,EAAV,GAAc,CAA9B;AACD,KAFD;AAGD;;AAfyB,C;;;UAEzB,S;AAAS,IAAA,IAAA,EAAA,CAAC,cAAD;;;AAFC,eAAe,GAAA,UAAA,CAAA,CAJ3B,SAAS,CAAC;AACT,EAAA,QAAQ,EAAE,eADD;AAET,EAAA,QAAQ,EAAE;AAFD,CAAD,CAIkB,CAAA,EAAf,eAAe,CAAf;SAAA,e","sourcesContent":["// Import patch to make async `HTMLCanvasElement` methods (such as `.toBlob()`) Zone.js-aware.\n// Either import in `polyfills.ts` (if used in more than one places in the app) or in the component\n// file using `HTMLCanvasElement` (if it is only used in a single file).\nimport 'zone.js/plugins/zone-patch-canvas';\nimport { Component, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\n\n@Component({\n  selector: 'sample-canvas',\n  template: '<canvas #sampleCanvas width=\"200\" height=\"200\"></canvas>',\n})\nexport class CanvasComponent implements AfterViewInit {\n  blobSize = 0;\n  @ViewChild('sampleCanvas') sampleCanvas!: ElementRef;\n\n  ngAfterViewInit() {\n    const canvas: HTMLCanvasElement = this.sampleCanvas.nativeElement;\n    const context = canvas.getContext('2d')!;\n\n    context.clearRect(0, 0, 200, 200);\n    context.fillStyle = '#FF1122';\n    context.fillRect(0, 0, 200, 200);\n\n    canvas.toBlob(blob => {\n      this.blobSize = blob?.size ?? 0;\n    });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}