{"ast":null,"code":"// For more examples:\n//   https://github.com/angular/angular/blob/master/modules/@angular/router/test/integration.spec.ts\nimport { waitForAsync, fakeAsync, TestBed, tick } from '@angular/core/testing';\nimport { asyncData } from '../testing';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { Router, RouterLinkWithHref } from '@angular/router';\nimport { By } from '@angular/platform-browser';\nimport { Location } from '@angular/common';\nimport { click } from '../testing';\nimport { routes } from './app-routing.module';\nimport { AppModule } from './app.module';\nimport { AppComponent } from './app.component';\nimport { AboutComponent } from './about/about.component';\nimport { DashboardComponent } from './dashboard/dashboard.component';\nimport { HeroService, TestHeroService } from './model/testing/test-hero.service';\nimport { TwainService } from './twain/twain.service';\nlet comp;\nlet fixture;\nlet page;\nlet router;\nlet location;\ndescribe('AppComponent & RouterTestingModule', () => {\n  beforeEach(waitForAsync(() => {\n    TestBed.configureTestingModule({\n      imports: [AppModule, RouterTestingModule.withRoutes(routes)],\n      providers: [{\n        provide: HeroService,\n        useClass: TestHeroService\n      }]\n    }).compileComponents();\n  }));\n  it('should navigate to \"Dashboard\" immediately', fakeAsync(() => {\n    createComponent();\n    tick(); // wait for async data to arrive\n\n    expectPathToBe('/dashboard', 'after initialNavigation()');\n    expectElementOf(DashboardComponent);\n  }));\n  it('should navigate to \"About\" on click', fakeAsync(() => {\n    createComponent();\n    click(page.aboutLinkDe); // page.aboutLinkDe.nativeElement.click(); // ok but fails in phantom\n\n    advance();\n    expectPathToBe('/about');\n    expectElementOf(AboutComponent);\n  }));\n  it('should navigate to \"About\" w/ browser location URL change', fakeAsync(() => {\n    createComponent();\n    location.simulateHashChange('/about'); // location.go('/about'); // also works ... except, perhaps, in Stackblitz\n\n    advance();\n    expectPathToBe('/about');\n    expectElementOf(AboutComponent);\n  })); // Can't navigate to lazy loaded modules with this technique\n\n  xit('should navigate to \"Heroes\" on click (not working yet)', fakeAsync(() => {\n    createComponent();\n    page.heroesLinkDe.nativeElement.click();\n    advance();\n    expectPathToBe('/heroes');\n  }));\n}); ///////////////\n\nimport { NgModuleFactoryLoader } from '@angular/core';\nimport { HeroModule } from './hero/hero.module'; // should be lazy loaded\n\nimport { HeroListComponent } from './hero/hero-list.component';\nlet loader; ///////// Can't get lazy loaded Heroes to work yet\n\nxdescribe('AppComponent & Lazy Loading (not working yet)', () => {\n  beforeEach(waitForAsync(() => {\n    TestBed.configureTestingModule({\n      imports: [AppModule, RouterTestingModule.withRoutes(routes)]\n    }).compileComponents();\n  }));\n  beforeEach(fakeAsync(() => {\n    createComponent();\n    loader = TestBed.inject(NgModuleFactoryLoader);\n    loader.stubbedModules = {\n      expected: HeroModule\n    };\n    router.resetConfig([{\n      path: 'heroes',\n      loadChildren: 'expected'\n    }]);\n  }));\n  it('should navigate to \"Heroes\" on click', waitForAsync(() => {\n    page.heroesLinkDe.nativeElement.click();\n    advance();\n    expectPathToBe('/heroes');\n    expectElementOf(HeroListComponent);\n  }));\n  it('can navigate to \"Heroes\" w/ browser location URL change', fakeAsync(() => {\n    location.go('/heroes');\n    advance();\n    expectPathToBe('/heroes');\n    expectElementOf(HeroListComponent);\n  }));\n}); ////// Helpers /////////\n\n/**\n * Advance to the routed page\n * Wait a tick, then detect changes, and tick again\n */\n\nfunction advance() {\n  tick(); // wait while navigating\n\n  fixture.detectChanges(); // update view\n\n  tick(); // wait for async data to arrive\n}\n\nfunction createComponent() {\n  fixture = TestBed.createComponent(AppComponent);\n  comp = fixture.componentInstance;\n  const injector = fixture.debugElement.injector;\n  location = injector.get(Location);\n  router = injector.get(Router);\n  router.initialNavigation();\n  spyOn(injector.get(TwainService), 'getQuote') // fake fast async observable\n  .and.returnValue(asyncData('Test Quote'));\n  advance();\n  page = new Page();\n}\n\nclass Page {\n  constructor() {\n    const links = fixture.debugElement.queryAll(By.directive(RouterLinkWithHref));\n    this.aboutLinkDe = links[2];\n    this.dashboardLinkDe = links[0];\n    this.heroesLinkDe = links[1]; // for debugging\n\n    this.comp = comp;\n    this.fixture = fixture;\n    this.router = router;\n  }\n\n}\n\nfunction expectPathToBe(path, expectationFailOutput) {\n  expect(location.path()).toEqual(path, expectationFailOutput || 'location.path()');\n}\n\nfunction expectElementOf(type) {\n  const el = fixture.debugElement.query(By.directive(type));\n  expect(el).toBeTruthy('expected an element for ' + type.name);\n  return el;\n}","map":{"version":3,"sources":["/Users/paulnguyen/Desktop/SRC/angular/testing/src/app/app.component.router.spec.ts"],"names":[],"mappings":"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","sourcesContent":["// For more examples:\n//   https://github.com/angular/angular/blob/master/modules/@angular/router/test/integration.spec.ts\n\nimport { waitForAsync, ComponentFixture, fakeAsync, TestBed, tick } from '@angular/core/testing';\n\nimport { asyncData } from '../testing';\n\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { SpyLocation } from '@angular/common/testing';\n\nimport { Router, RouterLinkWithHref } from '@angular/router';\n\nimport { By } from '@angular/platform-browser';\nimport { DebugElement, Type } from '@angular/core';\nimport { Location } from '@angular/common';\n\nimport { click } from '../testing';\n\nimport { routes } from './app-routing.module';\nimport { AppModule } from './app.module';\nimport { AppComponent } from './app.component';\nimport { AboutComponent } from './about/about.component';\nimport { DashboardComponent } from './dashboard/dashboard.component';\n\nimport { HeroService, TestHeroService } from './model/testing/test-hero.service';\nimport { TwainService } from './twain/twain.service';\n\nlet comp: AppComponent;\nlet fixture: ComponentFixture<AppComponent>;\nlet page: Page;\nlet router: Router;\nlet location: SpyLocation;\n\ndescribe('AppComponent & RouterTestingModule', () => {\n  beforeEach(waitForAsync(() => {\n    TestBed\n        .configureTestingModule({\n          imports: [\n            AppModule,\n            RouterTestingModule.withRoutes(routes),\n          ],\n          providers: [{provide: HeroService, useClass: TestHeroService}]\n        })\n        .compileComponents();\n  }));\n\n  it('should navigate to \"Dashboard\" immediately', fakeAsync(() => {\n       createComponent();\n       tick();  // wait for async data to arrive\n       expectPathToBe('/dashboard', 'after initialNavigation()');\n       expectElementOf(DashboardComponent);\n     }));\n\n  it('should navigate to \"About\" on click', fakeAsync(() => {\n       createComponent();\n       click(page.aboutLinkDe);\n       // page.aboutLinkDe.nativeElement.click(); // ok but fails in phantom\n\n       advance();\n       expectPathToBe('/about');\n       expectElementOf(AboutComponent);\n     }));\n\n  it('should navigate to \"About\" w/ browser location URL change', fakeAsync(() => {\n       createComponent();\n       location.simulateHashChange('/about');\n       // location.go('/about'); // also works ... except, perhaps, in Stackblitz\n       advance();\n       expectPathToBe('/about');\n       expectElementOf(AboutComponent);\n     }));\n\n  // Can't navigate to lazy loaded modules with this technique\n  xit('should navigate to \"Heroes\" on click (not working yet)', fakeAsync(() => {\n        createComponent();\n        page.heroesLinkDe.nativeElement.click();\n        advance();\n        expectPathToBe('/heroes');\n      }));\n});\n\n\n///////////////\nimport { NgModuleFactoryLoader } from '@angular/core';\nimport { SpyNgModuleFactoryLoader } from '@angular/router/testing';\n\nimport { HeroModule } from './hero/hero.module';  // should be lazy loaded\nimport { HeroListComponent } from './hero/hero-list.component';\n\nlet loader: SpyNgModuleFactoryLoader;\n\n///////// Can't get lazy loaded Heroes to work yet\nxdescribe('AppComponent & Lazy Loading (not working yet)', () => {\n  beforeEach(waitForAsync(() => {\n    TestBed\n        .configureTestingModule({\n          imports: [\n            AppModule,\n            RouterTestingModule.withRoutes(routes),\n          ],\n        })\n        .compileComponents();\n  }));\n\n  beforeEach(fakeAsync(() => {\n    createComponent();\n    loader = TestBed.inject(NgModuleFactoryLoader) as SpyNgModuleFactoryLoader;\n    loader.stubbedModules = {expected: HeroModule};\n    router.resetConfig([{path: 'heroes', loadChildren: 'expected'}]);\n  }));\n\n  it('should navigate to \"Heroes\" on click', waitForAsync(() => {\n       page.heroesLinkDe.nativeElement.click();\n       advance();\n       expectPathToBe('/heroes');\n       expectElementOf(HeroListComponent);\n     }));\n\n  it('can navigate to \"Heroes\" w/ browser location URL change', fakeAsync(() => {\n       location.go('/heroes');\n       advance();\n       expectPathToBe('/heroes');\n       expectElementOf(HeroListComponent);\n     }));\n});\n\n////// Helpers /////////\n\n/**\n * Advance to the routed page\n * Wait a tick, then detect changes, and tick again\n */\nfunction advance(): void {\n  tick();                   // wait while navigating\n  fixture.detectChanges();  // update view\n  tick();                   // wait for async data to arrive\n}\n\nfunction createComponent() {\n  fixture = TestBed.createComponent(AppComponent);\n  comp = fixture.componentInstance;\n\n  const injector = fixture.debugElement.injector;\n  location = injector.get(Location) as SpyLocation;\n  router = injector.get(Router);\n  router.initialNavigation();\n  spyOn(injector.get(TwainService), 'getQuote')\n      // fake fast async observable\n      .and.returnValue(asyncData('Test Quote'));\n  advance();\n\n  page = new Page();\n}\n\nclass Page {\n  aboutLinkDe: DebugElement;\n  dashboardLinkDe: DebugElement;\n  heroesLinkDe: DebugElement;\n\n  // for debugging\n  comp: AppComponent;\n  router: Router;\n  fixture: ComponentFixture<AppComponent>;\n\n  constructor() {\n    const links = fixture.debugElement.queryAll(By.directive(RouterLinkWithHref));\n    this.aboutLinkDe = links[2];\n    this.dashboardLinkDe = links[0];\n    this.heroesLinkDe = links[1];\n\n    // for debugging\n    this.comp = comp;\n    this.fixture = fixture;\n    this.router = router;\n  }\n}\n\nfunction expectPathToBe(path: string, expectationFailOutput?: any) {\n  expect(location.path()).toEqual(path, expectationFailOutput || 'location.path()');\n}\n\nfunction expectElementOf(type: Type<any>): any {\n  const el = fixture.debugElement.query(By.directive(type));\n  expect(el).toBeTruthy('expected an element for ' + type.name);\n  return el;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}