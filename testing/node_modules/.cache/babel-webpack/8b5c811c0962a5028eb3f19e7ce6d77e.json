{"ast":null,"code":"import _asyncToGenerator from \"/Users/paulnguyen/Desktop/SRC/angular/testing/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { fakeAsync, inject, TestBed, tick, waitForAsync } from '@angular/core/testing';\nimport { Router } from '@angular/router';\nimport { ActivatedRoute, ActivatedRouteStub, asyncData, click } from '../../testing';\nimport { HeroDetailComponent } from './hero-detail.component';\nimport { HeroDetailService } from './hero-detail.service';\nimport { HeroModule } from './hero.module'; ////// Testing Vars //////\n\nlet activatedRoute;\nlet component;\nlet fixture;\nlet page; ////// Tests //////\n\ndescribe('HeroDetailComponent', () => {\n  beforeEach(() => {\n    activatedRoute = new ActivatedRouteStub();\n  });\n  describe('with HeroModule setup', heroModuleSetup);\n  describe('when override its provided HeroDetailService', overrideSetup);\n  describe('with FormsModule setup', formsModuleSetup);\n  describe('with SharedModule setup', sharedModuleSetup);\n}); ///////////////////\n\nfunction overrideSetup() {\n  class HeroDetailServiceSpy {\n    constructor() {\n      this.testHero = {\n        id: 42,\n        name: 'Test Hero'\n      };\n      /* emit cloned test hero */\n\n      this.getHero = jasmine.createSpy('getHero').and.callFake(() => asyncData(Object.assign({}, this.testHero)));\n      /* emit clone of test hero, with changes merged in */\n\n      this.saveHero = jasmine.createSpy('saveHero').and.callFake(hero => asyncData(Object.assign(this.testHero, hero)));\n    }\n\n  } // the `id` value is irrelevant because ignored by service stub\n\n\n  beforeEach(() => activatedRoute.setParamMap({\n    id: 99999\n  }));\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    const routerSpy = createRouterSpy();\n    yield TestBed.configureTestingModule({\n      imports: [HeroModule],\n      providers: [{\n        provide: ActivatedRoute,\n        useValue: activatedRoute\n      }, {\n        provide: Router,\n        useValue: routerSpy\n      }, // HeroDetailService at this level is IRRELEVANT!\n      {\n        provide: HeroDetailService,\n        useValue: {}\n      }]\n    }) // Override component's own provider\n    .overrideComponent(HeroDetailComponent, {\n      set: {\n        providers: [{\n          provide: HeroDetailService,\n          useClass: HeroDetailServiceSpy\n        }]\n      }\n    }).compileComponents();\n  }));\n  let hdsSpy;\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    yield createComponent(); // get the component's injected HeroDetailServiceSpy\n\n    hdsSpy = fixture.debugElement.injector.get(HeroDetailService);\n  }));\n  it('should have called `getHero`', () => {\n    expect(hdsSpy.getHero.calls.count()).toBe(1, 'getHero called once');\n  });\n  it('should display stub hero\\'s name', () => {\n    expect(page.nameDisplay.textContent).toBe(hdsSpy.testHero.name);\n  });\n  it('should save stub hero change', fakeAsync(() => {\n    const origName = hdsSpy.testHero.name;\n    const newName = 'New Name';\n    page.nameInput.value = newName; // In older browsers, such as IE, you might need a CustomEvent instead. See\n    // https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent#Polyfill\n\n    page.nameInput.dispatchEvent(new Event('input')); // tell Angular\n\n    expect(component.hero.name).toBe(newName, 'component hero has new name');\n    expect(hdsSpy.testHero.name).toBe(origName, 'service hero unchanged before save');\n    click(page.saveBtn);\n    expect(hdsSpy.saveHero.calls.count()).toBe(1, 'saveHero called once');\n    tick(); // wait for async save to complete\n\n    expect(hdsSpy.testHero.name).toBe(newName, 'service hero has new name after save');\n    expect(page.navigateSpy.calls.any()).toBe(true, 'router.navigate called');\n  }));\n  it('fixture injected service is not the component injected service', // inject gets the service from the fixture\n  inject([HeroDetailService], fixtureService => {\n    // use `fixture.debugElement.injector` to get service from component\n    const componentService = fixture.debugElement.injector.get(HeroDetailService);\n    expect(fixtureService).not.toBe(componentService, 'service injected from fixture');\n  }));\n} ////////////////////\n\n\nimport { getTestHeroes, TestHeroService, HeroService } from '../model/testing/test-hero.service';\nconst firstHero = getTestHeroes()[0];\n\nfunction heroModuleSetup() {\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    const routerSpy = createRouterSpy();\n    yield TestBed.configureTestingModule({\n      imports: [HeroModule],\n      //  declarations: [ HeroDetailComponent ], // NO!  DOUBLE DECLARATION\n      providers: [{\n        provide: ActivatedRoute,\n        useValue: activatedRoute\n      }, {\n        provide: HeroService,\n        useClass: TestHeroService\n      }, {\n        provide: Router,\n        useValue: routerSpy\n      }]\n    }).compileComponents();\n  }));\n  describe('when navigate to existing hero', () => {\n    let expectedHero;\n    beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n      expectedHero = firstHero;\n      activatedRoute.setParamMap({\n        id: expectedHero.id\n      });\n      yield createComponent();\n    }));\n    it('should display that hero\\'s name', () => {\n      expect(page.nameDisplay.textContent).toBe(expectedHero.name);\n    });\n    it('should navigate when click cancel', () => {\n      click(page.cancelBtn);\n      expect(page.navigateSpy.calls.any()).toBe(true, 'router.navigate called');\n    });\n    it('should save when click save but not navigate immediately', () => {\n      // Get service injected into component and spy on its`saveHero` method.\n      // It delegates to fake `HeroService.updateHero` which delivers a safe test result.\n      const hds = fixture.debugElement.injector.get(HeroDetailService);\n      const saveSpy = spyOn(hds, 'saveHero').and.callThrough();\n      click(page.saveBtn);\n      expect(saveSpy.calls.any()).toBe(true, 'HeroDetailService.save called');\n      expect(page.navigateSpy.calls.any()).toBe(false, 'router.navigate not called');\n    });\n    it('should navigate when click save and save resolves', fakeAsync(() => {\n      click(page.saveBtn);\n      tick(); // wait for async save to complete\n\n      expect(page.navigateSpy.calls.any()).toBe(true, 'router.navigate called');\n    }));\n    it('should convert hero name to Title Case', () => {\n      // get the name's input and display elements from the DOM\n      const hostElement = fixture.nativeElement;\n      const nameInput = hostElement.querySelector('input');\n      const nameDisplay = hostElement.querySelector('span'); // simulate user entering a new name into the input box\n\n      nameInput.value = 'quick BROWN  fOx'; // Dispatch a DOM event so that Angular learns of input value change.\n      // In older browsers, such as IE, you might need a CustomEvent instead. See\n      // https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent#Polyfill\n\n      nameInput.dispatchEvent(new Event('input')); // Tell Angular to update the display binding through the title pipe\n\n      fixture.detectChanges();\n      expect(nameDisplay.textContent).toBe('Quick Brown  Fox');\n    });\n  });\n  describe('when navigate with no hero id', () => {\n    beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n      yield createComponent();\n    }));\n    it('should have hero.id === 0', () => {\n      expect(component.hero.id).toBe(0);\n    });\n    it('should display empty hero name', () => {\n      expect(page.nameDisplay.textContent).toBe('');\n    });\n  });\n  describe('when navigate to non-existent hero id', () => {\n    beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n      activatedRoute.setParamMap({\n        id: 99999\n      });\n      yield createComponent();\n    }));\n    it('should try to navigate back to hero list', () => {\n      expect(page.gotoListSpy.calls.any()).toBe(true, 'comp.gotoList called');\n      expect(page.navigateSpy.calls.any()).toBe(true, 'router.navigate called');\n    });\n  }); // Why we must use `fixture.debugElement.injector` in `Page()`\n\n  it('cannot use `inject` to get component\\'s provided HeroDetailService', () => {\n    let service;\n    fixture = TestBed.createComponent(HeroDetailComponent);\n    expect( // Throws because `inject` only has access to TestBed's injector\n    // which is an ancestor of the component's injector\n    inject([HeroDetailService], hds => service = hds)).toThrowError(/No provider for HeroDetailService/); // get `HeroDetailService` with component's own injector\n\n    service = fixture.debugElement.injector.get(HeroDetailService);\n    expect(service).toBeDefined('debugElement.injector');\n  });\n} /////////////////////\n\n\nimport { FormsModule } from '@angular/forms';\nimport { TitleCasePipe } from '../shared/title-case.pipe';\n\nfunction formsModuleSetup() {\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    const routerSpy = createRouterSpy();\n    yield TestBed.configureTestingModule({\n      imports: [FormsModule],\n      declarations: [HeroDetailComponent, TitleCasePipe],\n      providers: [{\n        provide: ActivatedRoute,\n        useValue: activatedRoute\n      }, {\n        provide: HeroService,\n        useClass: TestHeroService\n      }, {\n        provide: Router,\n        useValue: routerSpy\n      }]\n    }).compileComponents();\n  }));\n  it('should display 1st hero\\'s name', waitForAsync(() => {\n    const expectedHero = firstHero;\n    activatedRoute.setParamMap({\n      id: expectedHero.id\n    });\n    createComponent().then(() => {\n      expect(page.nameDisplay.textContent).toBe(expectedHero.name);\n    });\n  }));\n} ///////////////////////\n\n\nimport { SharedModule } from '../shared/shared.module';\n\nfunction sharedModuleSetup() {\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    const routerSpy = createRouterSpy();\n    yield TestBed.configureTestingModule({\n      imports: [SharedModule],\n      declarations: [HeroDetailComponent],\n      providers: [{\n        provide: ActivatedRoute,\n        useValue: activatedRoute\n      }, {\n        provide: HeroService,\n        useClass: TestHeroService\n      }, {\n        provide: Router,\n        useValue: routerSpy\n      }]\n    }).compileComponents();\n  }));\n  it('should display 1st hero\\'s name', waitForAsync(() => {\n    const expectedHero = firstHero;\n    activatedRoute.setParamMap({\n      id: expectedHero.id\n    });\n    createComponent().then(() => {\n      expect(page.nameDisplay.textContent).toBe(expectedHero.name);\n    });\n  }));\n} /////////// Helpers /////\n\n/** Create the HeroDetailComponent, initialize it, set test variables  */\n\n\nfunction createComponent() {\n  fixture = TestBed.createComponent(HeroDetailComponent);\n  component = fixture.componentInstance;\n  page = new Page(fixture); // 1st change detection triggers ngOnInit which gets a hero\n\n  fixture.detectChanges();\n  return fixture.whenStable().then(() => {\n    // 2nd change detection displays the async-fetched hero\n    fixture.detectChanges();\n  });\n}\n\nclass Page {\n  constructor(someFixture) {\n    // get the navigate spy from the injected router spy object\n    const routerSpy = someFixture.debugElement.injector.get(Router);\n    this.navigateSpy = routerSpy.navigate; // spy on component's `gotoList()` method\n\n    const someComponent = someFixture.componentInstance;\n    this.gotoListSpy = spyOn(someComponent, 'gotoList').and.callThrough();\n  } // getter properties wait to query the DOM until called.\n\n\n  get buttons() {\n    return this.queryAll('button');\n  }\n\n  get saveBtn() {\n    return this.buttons[0];\n  }\n\n  get cancelBtn() {\n    return this.buttons[1];\n  }\n\n  get nameDisplay() {\n    return this.query('span');\n  }\n\n  get nameInput() {\n    return this.query('input');\n  } //// query helpers ////\n\n\n  query(selector) {\n    return fixture.nativeElement.querySelector(selector);\n  }\n\n  queryAll(selector) {\n    return fixture.nativeElement.querySelectorAll(selector);\n  }\n\n}\n\nfunction createRouterSpy() {\n  return jasmine.createSpyObj('Router', ['navigate']);\n}","map":{"version":3,"sources":["/Users/paulnguyen/Desktop/SRC/angular/testing/src/app/hero/hero-detail.component.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { ComponentFixture, fakeAsync, inject, TestBed, tick, waitForAsync } from '@angular/core/testing';\nimport { Router } from '@angular/router';\n\nimport {\n  ActivatedRoute, ActivatedRouteStub, asyncData, click\n} from '../../testing';\n\nimport { Hero } from '../model/hero';\nimport { HeroDetailComponent } from './hero-detail.component';\nimport { HeroDetailService } from './hero-detail.service';\nimport { HeroModule } from './hero.module';\n\n////// Testing Vars //////\nlet activatedRoute: ActivatedRouteStub;\nlet component: HeroDetailComponent;\nlet fixture: ComponentFixture<HeroDetailComponent>;\nlet page: Page;\n\n////// Tests //////\ndescribe('HeroDetailComponent', () => {\n  beforeEach(() => {\n    activatedRoute = new ActivatedRouteStub();\n  });\n  describe('with HeroModule setup', heroModuleSetup);\n  describe('when override its provided HeroDetailService', overrideSetup);\n  describe('with FormsModule setup', formsModuleSetup);\n  describe('with SharedModule setup', sharedModuleSetup);\n});\n\n///////////////////\n\nfunction overrideSetup() {\n  class HeroDetailServiceSpy {\n    testHero: Hero = {id: 42, name: 'Test Hero'};\n\n    /* emit cloned test hero */\n    getHero = jasmine.createSpy('getHero').and.callFake(\n        () => asyncData(Object.assign({}, this.testHero)));\n\n    /* emit clone of test hero, with changes merged in */\n    saveHero = jasmine.createSpy('saveHero')\n                   .and.callFake((hero: Hero) => asyncData(Object.assign(this.testHero, hero)));\n  }\n\n\n  // the `id` value is irrelevant because ignored by service stub\n  beforeEach(() => activatedRoute.setParamMap({id: 99999}));\n\n  beforeEach(async () => {\n    const routerSpy = createRouterSpy();\n\n    await TestBed\n        .configureTestingModule({\n          imports: [HeroModule],\n          providers: [\n            {provide: ActivatedRoute, useValue: activatedRoute},\n            {provide: Router, useValue: routerSpy},\n            // HeroDetailService at this level is IRRELEVANT!\n            {provide: HeroDetailService, useValue: {}}\n          ]\n        })\n\n        // Override component's own provider\n        .overrideComponent(\n            HeroDetailComponent,\n            {set: {providers: [{provide: HeroDetailService, useClass: HeroDetailServiceSpy}]}})\n\n        .compileComponents();\n  });\n\n  let hdsSpy: HeroDetailServiceSpy;\n\n  beforeEach(async () => {\n    await createComponent();\n    // get the component's injected HeroDetailServiceSpy\n    hdsSpy = fixture.debugElement.injector.get(HeroDetailService) as any;\n  });\n\n  it('should have called `getHero`', () => {\n    expect(hdsSpy.getHero.calls.count()).toBe(1, 'getHero called once');\n  });\n\n  it('should display stub hero\\'s name', () => {\n    expect(page.nameDisplay.textContent).toBe(hdsSpy.testHero.name);\n  });\n\n  it('should save stub hero change', fakeAsync(() => {\n       const origName = hdsSpy.testHero.name;\n       const newName = 'New Name';\n\n       page.nameInput.value = newName;\n\n       // In older browsers, such as IE, you might need a CustomEvent instead. See\n       // https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent#Polyfill\n       page.nameInput.dispatchEvent(new Event('input')); // tell Angular\n\n       expect(component.hero.name).toBe(newName, 'component hero has new name');\n       expect(hdsSpy.testHero.name).toBe(origName, 'service hero unchanged before save');\n\n       click(page.saveBtn);\n       expect(hdsSpy.saveHero.calls.count()).toBe(1, 'saveHero called once');\n\n       tick();  // wait for async save to complete\n       expect(hdsSpy.testHero.name).toBe(newName, 'service hero has new name after save');\n       expect(page.navigateSpy.calls.any()).toBe(true, 'router.navigate called');\n     }));\n\n  it('fixture injected service is not the component injected service',\n     // inject gets the service from the fixture\n     inject([HeroDetailService], (fixtureService: HeroDetailService) => {\n       // use `fixture.debugElement.injector` to get service from component\n       const componentService = fixture.debugElement.injector.get(HeroDetailService);\n\n       expect(fixtureService).not.toBe(componentService, 'service injected from fixture');\n     }));\n}\n\n////////////////////\nimport { getTestHeroes, TestHeroService, HeroService } from '../model/testing/test-hero.service';\n\nconst firstHero = getTestHeroes()[0];\n\nfunction heroModuleSetup() {\n  beforeEach(async () => {\n    const routerSpy = createRouterSpy();\n\n    await TestBed\n        .configureTestingModule({\n          imports: [HeroModule],\n          //  declarations: [ HeroDetailComponent ], // NO!  DOUBLE DECLARATION\n          providers: [\n            {provide: ActivatedRoute, useValue: activatedRoute},\n            {provide: HeroService, useClass: TestHeroService},\n            {provide: Router, useValue: routerSpy},\n          ]\n        })\n        .compileComponents();\n  });\n\n  describe('when navigate to existing hero', () => {\n    let expectedHero: Hero;\n\n    beforeEach(async () => {\n      expectedHero = firstHero;\n      activatedRoute.setParamMap({id: expectedHero.id});\n      await createComponent();\n    });\n\n    it('should display that hero\\'s name', () => {\n      expect(page.nameDisplay.textContent).toBe(expectedHero.name);\n    });\n\n    it('should navigate when click cancel', () => {\n      click(page.cancelBtn);\n      expect(page.navigateSpy.calls.any()).toBe(true, 'router.navigate called');\n    });\n\n    it('should save when click save but not navigate immediately', () => {\n      // Get service injected into component and spy on its`saveHero` method.\n      // It delegates to fake `HeroService.updateHero` which delivers a safe test result.\n      const hds = fixture.debugElement.injector.get(HeroDetailService);\n      const saveSpy = spyOn(hds, 'saveHero').and.callThrough();\n\n      click(page.saveBtn);\n      expect(saveSpy.calls.any()).toBe(true, 'HeroDetailService.save called');\n      expect(page.navigateSpy.calls.any()).toBe(false, 'router.navigate not called');\n    });\n\n    it('should navigate when click save and save resolves', fakeAsync(() => {\n         click(page.saveBtn);\n         tick();  // wait for async save to complete\n         expect(page.navigateSpy.calls.any()).toBe(true, 'router.navigate called');\n       }));\n\n    it('should convert hero name to Title Case', () => {\n      // get the name's input and display elements from the DOM\n      const hostElement: HTMLElement = fixture.nativeElement;\n      const nameInput: HTMLInputElement = hostElement.querySelector('input')!;\n      const nameDisplay: HTMLElement = hostElement.querySelector('span')!;\n\n      // simulate user entering a new name into the input box\n      nameInput.value = 'quick BROWN  fOx';\n\n      // Dispatch a DOM event so that Angular learns of input value change.\n      // In older browsers, such as IE, you might need a CustomEvent instead. See\n      // https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent#Polyfill\n      nameInput.dispatchEvent(new Event('input'));\n\n      // Tell Angular to update the display binding through the title pipe\n      fixture.detectChanges();\n\n      expect(nameDisplay.textContent).toBe('Quick Brown  Fox');\n    });\n  });\n\n  describe('when navigate with no hero id', () => {\n    beforeEach(async () => {\n      await createComponent();\n    });\n\n    it('should have hero.id === 0', () => {\n      expect(component.hero.id).toBe(0);\n    });\n\n    it('should display empty hero name', () => {\n      expect(page.nameDisplay.textContent).toBe('');\n    });\n  });\n\n  describe('when navigate to non-existent hero id', () => {\n    beforeEach(async () => {\n      activatedRoute.setParamMap({id: 99999});\n      await createComponent();\n    });\n\n    it('should try to navigate back to hero list', () => {\n      expect(page.gotoListSpy.calls.any()).toBe(true, 'comp.gotoList called');\n      expect(page.navigateSpy.calls.any()).toBe(true, 'router.navigate called');\n    });\n  });\n\n  // Why we must use `fixture.debugElement.injector` in `Page()`\n  it('cannot use `inject` to get component\\'s provided HeroDetailService', () => {\n    let service: HeroDetailService;\n    fixture = TestBed.createComponent(HeroDetailComponent);\n    expect(\n        // Throws because `inject` only has access to TestBed's injector\n        // which is an ancestor of the component's injector\n        inject([HeroDetailService], (hds: HeroDetailService) => service = hds))\n        .toThrowError(/No provider for HeroDetailService/);\n\n    // get `HeroDetailService` with component's own injector\n    service = fixture.debugElement.injector.get(HeroDetailService);\n    expect(service).toBeDefined('debugElement.injector');\n  });\n}\n\n/////////////////////\nimport { FormsModule } from '@angular/forms';\nimport { TitleCasePipe } from '../shared/title-case.pipe';\n\nfunction formsModuleSetup() {\n  beforeEach(async () => {\n    const routerSpy = createRouterSpy();\n\n    await TestBed\n        .configureTestingModule({\n          imports: [FormsModule],\n          declarations: [HeroDetailComponent, TitleCasePipe],\n          providers: [\n            {provide: ActivatedRoute, useValue: activatedRoute},\n            {provide: HeroService, useClass: TestHeroService},\n            {provide: Router, useValue: routerSpy},\n          ]\n        })\n        .compileComponents();\n  });\n\n  it('should display 1st hero\\'s name', waitForAsync(() => {\n       const expectedHero = firstHero;\n       activatedRoute.setParamMap({id: expectedHero.id});\n       createComponent().then(() => {\n         expect(page.nameDisplay.textContent).toBe(expectedHero.name);\n       });\n     }));\n}\n\n///////////////////////\nimport { SharedModule } from '../shared/shared.module';\n\nfunction sharedModuleSetup() {\n  beforeEach(async () => {\n    const routerSpy = createRouterSpy();\n\n    await TestBed\n        .configureTestingModule({\n          imports: [SharedModule],\n          declarations: [HeroDetailComponent],\n          providers: [\n            {provide: ActivatedRoute, useValue: activatedRoute},\n            {provide: HeroService, useClass: TestHeroService},\n            {provide: Router, useValue: routerSpy},\n          ]\n        })\n        .compileComponents();\n  });\n\n  it('should display 1st hero\\'s name', waitForAsync(() => {\n       const expectedHero = firstHero;\n       activatedRoute.setParamMap({id: expectedHero.id});\n       createComponent().then(() => {\n         expect(page.nameDisplay.textContent).toBe(expectedHero.name);\n       });\n     }));\n}\n\n/////////// Helpers /////\n\n/** Create the HeroDetailComponent, initialize it, set test variables  */\nfunction createComponent() {\n  fixture = TestBed.createComponent(HeroDetailComponent);\n  component = fixture.componentInstance;\n  page = new Page(fixture);\n\n  // 1st change detection triggers ngOnInit which gets a hero\n  fixture.detectChanges();\n  return fixture.whenStable().then(() => {\n    // 2nd change detection displays the async-fetched hero\n    fixture.detectChanges();\n  });\n}\n\nclass Page {\n  // getter properties wait to query the DOM until called.\n  get buttons() {\n    return this.queryAll<HTMLButtonElement>('button');\n  }\n  get saveBtn() {\n    return this.buttons[0];\n  }\n  get cancelBtn() {\n    return this.buttons[1];\n  }\n  get nameDisplay() {\n    return this.query<HTMLElement>('span');\n  }\n  get nameInput() {\n    return this.query<HTMLInputElement>('input');\n  }\n\n  gotoListSpy: jasmine.Spy;\n  navigateSpy: jasmine.Spy;\n\n  constructor(someFixture: ComponentFixture<HeroDetailComponent>) {\n    // get the navigate spy from the injected router spy object\n    const routerSpy = someFixture.debugElement.injector.get(Router) as any;\n    this.navigateSpy = routerSpy.navigate;\n\n    // spy on component's `gotoList()` method\n    const someComponent = someFixture.componentInstance;\n    this.gotoListSpy = spyOn(someComponent, 'gotoList').and.callThrough();\n  }\n\n  //// query helpers ////\n  private query<T>(selector: string): T {\n    return fixture.nativeElement.querySelector(selector);\n  }\n\n  private queryAll<T>(selector: string): T[] {\n    return fixture.nativeElement.querySelectorAll(selector);\n  }\n}\n\nfunction createRouterSpy() {\n  return jasmine.createSpyObj('Router', ['navigate']);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}