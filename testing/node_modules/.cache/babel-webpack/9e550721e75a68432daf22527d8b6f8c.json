{"ast":null,"code":"import { asyncData, ActivatedRouteStub } from '../../testing';\nimport { HeroDetailComponent } from './hero-detail.component'; //////////  Tests  ////////////////////\n\ndescribe('HeroDetailComponent - no TestBed', () => {\n  let comp;\n  let expectedHero;\n  let hds;\n  let router;\n  beforeEach(done => {\n    expectedHero = {\n      id: 42,\n      name: 'Bubba'\n    };\n    const activatedRoute = new ActivatedRouteStub({\n      id: expectedHero.id\n    });\n    router = jasmine.createSpyObj('router', ['navigate']);\n    hds = jasmine.createSpyObj('HeroDetailService', ['getHero', 'saveHero']);\n    hds.getHero.and.returnValue(asyncData(expectedHero));\n    hds.saveHero.and.returnValue(asyncData(expectedHero));\n    comp = new HeroDetailComponent(hds, activatedRoute, router);\n    comp.ngOnInit(); // OnInit calls HDS.getHero; wait for it to get the fake hero\n\n    hds.getHero.calls.first().returnValue.subscribe(done);\n  });\n  it('should expose the hero retrieved from the service', () => {\n    expect(comp.hero).toBe(expectedHero);\n  });\n  it('should navigate when click cancel', () => {\n    comp.cancel();\n    expect(router.navigate.calls.any()).toBe(true, 'router.navigate called');\n  });\n  it('should save when click save', () => {\n    comp.save();\n    expect(hds.saveHero.calls.any()).toBe(true, 'HeroDetailService.save called');\n    expect(router.navigate.calls.any()).toBe(false, 'router.navigate not called yet');\n  });\n  it('should navigate when click save resolves', done => {\n    comp.save(); // waits for async save to complete before navigating\n\n    hds.saveHero.calls.first().returnValue.subscribe(() => {\n      expect(router.navigate.calls.any()).toBe(true, 'router.navigate called');\n      done();\n    });\n  });\n});","map":{"version":3,"sources":["/Users/paulnguyen/Desktop/SRC/angular/testing/src/app/hero/hero-detail.component.no-testbed.spec.ts"],"names":[],"mappings":"AAAA,SAAS,SAAT,EAAoB,kBAApB,QAA8C,eAA9C;AAEA,SAAS,mBAAT,QAAoC,yBAApC,C,CAGA;;AAEA,QAAQ,CAAC,kCAAD,EAAqC,MAAK;AAChD,MAAI,IAAJ;AACA,MAAI,YAAJ;AACA,MAAI,GAAJ;AACA,MAAI,MAAJ;AAEA,EAAA,UAAU,CAAE,IAAD,IAAiB;AAC1B,IAAA,YAAY,GAAG;AAAC,MAAA,EAAE,EAAE,EAAL;AAAS,MAAA,IAAI,EAAE;AAAf,KAAf;AACA,UAAM,cAAc,GAAG,IAAI,kBAAJ,CAAuB;AAAE,MAAA,EAAE,EAAE,YAAY,CAAC;AAAnB,KAAvB,CAAvB;AACA,IAAA,MAAM,GAAG,OAAO,CAAC,YAAR,CAAqB,QAArB,EAA+B,CAAC,UAAD,CAA/B,CAAT;AAEA,IAAA,GAAG,GAAG,OAAO,CAAC,YAAR,CAAqB,mBAArB,EAA0C,CAAC,SAAD,EAAY,UAAZ,CAA1C,CAAN;AACA,IAAA,GAAG,CAAC,OAAJ,CAAY,GAAZ,CAAgB,WAAhB,CAA4B,SAAS,CAAC,YAAD,CAArC;AACA,IAAA,GAAG,CAAC,QAAJ,CAAa,GAAb,CAAiB,WAAjB,CAA6B,SAAS,CAAC,YAAD,CAAtC;AAEA,IAAA,IAAI,GAAG,IAAI,mBAAJ,CAAwB,GAAxB,EAA6B,cAA7B,EAAoD,MAApD,CAAP;AACA,IAAA,IAAI,CAAC,QAAL,GAV0B,CAY1B;;AACA,IAAA,GAAG,CAAC,OAAJ,CAAY,KAAZ,CAAkB,KAAlB,GAA0B,WAA1B,CAAsC,SAAtC,CAAgD,IAAhD;AACD,GAdS,CAAV;AAgBA,EAAA,EAAE,CAAC,mDAAD,EAAsD,MAAK;AAC3D,IAAA,MAAM,CAAC,IAAI,CAAC,IAAN,CAAN,CAAkB,IAAlB,CAAuB,YAAvB;AACD,GAFC,CAAF;AAIA,EAAA,EAAE,CAAC,mCAAD,EAAsC,MAAK;AAC3C,IAAA,IAAI,CAAC,MAAL;AACA,IAAA,MAAM,CAAC,MAAM,CAAC,QAAP,CAAgB,KAAhB,CAAsB,GAAtB,EAAD,CAAN,CAAoC,IAApC,CAAyC,IAAzC,EAA+C,wBAA/C;AACD,GAHC,CAAF;AAKA,EAAA,EAAE,CAAC,6BAAD,EAAgC,MAAK;AACrC,IAAA,IAAI,CAAC,IAAL;AACA,IAAA,MAAM,CAAC,GAAG,CAAC,QAAJ,CAAa,KAAb,CAAmB,GAAnB,EAAD,CAAN,CAAiC,IAAjC,CAAsC,IAAtC,EAA4C,+BAA5C;AACA,IAAA,MAAM,CAAC,MAAM,CAAC,QAAP,CAAgB,KAAhB,CAAsB,GAAtB,EAAD,CAAN,CAAoC,IAApC,CAAyC,KAAzC,EAAgD,gCAAhD;AACD,GAJC,CAAF;AAMA,EAAA,EAAE,CAAC,0CAAD,EAA8C,IAAD,IAAiB;AAC9D,IAAA,IAAI,CAAC,IAAL,GAD8D,CAE9D;;AACA,IAAA,GAAG,CAAC,QAAJ,CAAa,KAAb,CAAmB,KAAnB,GAA2B,WAA3B,CACC,SADD,CACW,MAAK;AACd,MAAA,MAAM,CAAC,MAAM,CAAC,QAAP,CAAgB,KAAhB,CAAsB,GAAtB,EAAD,CAAN,CAAoC,IAApC,CAAyC,IAAzC,EAA+C,wBAA/C;AACA,MAAA,IAAI;AACL,KAJD;AAKD,GARC,CAAF;AAUD,CA/CO,CAAR","sourcesContent":["import { asyncData, ActivatedRouteStub } from '../../testing';\n\nimport { HeroDetailComponent } from './hero-detail.component';\nimport { Hero } from '../model/hero';\n\n//////////  Tests  ////////////////////\n\ndescribe('HeroDetailComponent - no TestBed', () => {\n  let comp: HeroDetailComponent;\n  let expectedHero: Hero;\n  let hds: any;\n  let router: any;\n\n  beforeEach((done: DoneFn) => {\n    expectedHero = {id: 42, name: 'Bubba' };\n    const activatedRoute = new ActivatedRouteStub({ id: expectedHero.id });\n    router = jasmine.createSpyObj('router', ['navigate']);\n\n    hds = jasmine.createSpyObj('HeroDetailService', ['getHero', 'saveHero']);\n    hds.getHero.and.returnValue(asyncData(expectedHero));\n    hds.saveHero.and.returnValue(asyncData(expectedHero));\n\n    comp = new HeroDetailComponent(hds, activatedRoute as any, router);\n    comp.ngOnInit();\n\n    // OnInit calls HDS.getHero; wait for it to get the fake hero\n    hds.getHero.calls.first().returnValue.subscribe(done);\n  });\n\n  it('should expose the hero retrieved from the service', () => {\n    expect(comp.hero).toBe(expectedHero);\n  });\n\n  it('should navigate when click cancel', () => {\n    comp.cancel();\n    expect(router.navigate.calls.any()).toBe(true, 'router.navigate called');\n  });\n\n  it('should save when click save', () => {\n    comp.save();\n    expect(hds.saveHero.calls.any()).toBe(true, 'HeroDetailService.save called');\n    expect(router.navigate.calls.any()).toBe(false, 'router.navigate not called yet');\n  });\n\n  it('should navigate when click save resolves', (done: DoneFn) => {\n    comp.save();\n    // waits for async save to complete before navigating\n    hds.saveHero.calls.first().returnValue\n    .subscribe(() => {\n      expect(router.navigate.calls.any()).toBe(true, 'router.navigate called');\n      done();\n    });\n  });\n\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}