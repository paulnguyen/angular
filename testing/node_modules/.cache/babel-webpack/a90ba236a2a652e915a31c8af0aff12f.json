{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { asyncData } from '../../../testing';\nimport { map } from 'rxjs/operators';\nexport { HeroService } from '../hero.service';\nexport { getTestHeroes } from './test-heroes';\nimport { HeroService } from '../hero.service';\nimport { getTestHeroes } from './test-heroes';\nlet TestHeroService = class TestHeroService extends HeroService {\n  constructor() {\n    // This is a fake testing service that won't be making HTTP\n    // requests so we can pass in `null` as the HTTP client.\n    super(null);\n    this.heroes = getTestHeroes();\n  }\n\n  addHero(hero) {\n    throw new Error('Method not implemented.');\n  }\n\n  deleteHero(hero) {\n    throw new Error('Method not implemented.');\n  }\n\n  getHeroes() {\n    return this.lastResult = asyncData(this.heroes);\n  }\n\n  getHero(id) {\n    if (typeof id === 'string') {\n      id = parseInt(id, 10);\n    }\n\n    const hero = this.heroes.find(h => h.id === id);\n    this.lastResult = asyncData(hero);\n    return this.lastResult;\n  }\n\n  updateHero(hero) {\n    return this.lastResult = this.getHero(hero.id).pipe(map(h => {\n      if (h) {\n        return Object.assign(h, hero);\n      }\n\n      throw new Error(`Hero ${hero.id} not found`);\n    }));\n  }\n\n};\n\nTestHeroService.ctorParameters = () => [];\n\nTestHeroService = __decorate([Injectable()\n/**\n * FakeHeroService pretends to make real http requests.\n * implements only as much of HeroService as is actually consumed by the app\n */\n], TestHeroService);\nexport { TestHeroService };","map":{"version":3,"sources":["/Users/paulnguyen/Desktop/SRC/angular/testing/src/app/model/testing/test-hero.service.ts"],"names":[],"mappings":";AAAA,SAAS,UAAT,QAA2B,eAA3B;AAGA,SAAS,SAAT,QAA0B,kBAA1B;AAEA,SAAS,GAAT,QAAoB,gBAApB;AAIA,SAAS,WAAT,QAA4B,iBAA5B;AACA,SAAS,aAAT,QAA8B,eAA9B;AAGA,SAAS,WAAT,QAA4B,iBAA5B;AACA,SAAS,aAAT,QAA8B,eAA9B;IAOa,eAAe,GAAA,MAAf,eAAe,SAAS,WAAT,CAAoB;AAE9C,EAAA,WAAA,GAAA;AACE;AACA;AACA,UAAM,IAAN;AAGF,SAAA,MAAA,GAAS,aAAa,EAAtB;AAFC;;AAKD,EAAA,OAAO,CAAC,IAAD,EAAW;AAChB,UAAM,IAAI,KAAJ,CAAU,yBAAV,CAAN;AACD;;AAED,EAAA,UAAU,CAAC,IAAD,EAAoB;AAC5B,UAAM,IAAI,KAAJ,CAAU,yBAAV,CAAN;AACD;;AAED,EAAA,SAAS,GAAA;AACP,WAAO,KAAK,UAAL,GAAkB,SAAS,CAAC,KAAK,MAAN,CAAlC;AACD;;AAED,EAAA,OAAO,CAAC,EAAD,EAAoB;AACzB,QAAI,OAAO,EAAP,KAAc,QAAlB,EAA4B;AAC1B,MAAA,EAAE,GAAG,QAAQ,CAAC,EAAD,EAAK,EAAL,CAAb;AACD;;AACD,UAAM,IAAI,GAAG,KAAK,MAAL,CAAY,IAAZ,CAAiB,CAAC,IAAI,CAAC,CAAC,EAAF,KAAS,EAA/B,CAAb;AACA,SAAK,UAAL,GAAkB,SAAS,CAAC,IAAD,CAA3B;AACA,WAAO,KAAK,UAAZ;AACD;;AAED,EAAA,UAAU,CAAC,IAAD,EAAW;AACnB,WAAO,KAAK,UAAL,GAAkB,KAAK,OAAL,CAAa,IAAI,CAAC,EAAlB,EAAsB,IAAtB,CACvB,GAAG,CAAC,CAAC,IAAG;AACN,UAAI,CAAJ,EAAO;AACL,eAAO,MAAM,CAAC,MAAP,CAAc,CAAd,EAAiB,IAAjB,CAAP;AACD;;AACD,YAAM,IAAI,KAAJ,CAAU,QAAQ,IAAI,CAAC,EAAE,YAAzB,CAAN;AACD,KALE,CADoB,CAAzB;AAQD;;AAzC6C,C;;;;AAAnC,eAAe,GAAA,UAAA,CAAA,CAL3B,UAAU;AACX;;;AAGG;AACyB,CAAA,EAAf,eAAe,CAAf;SAAA,e","sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { asyncData } from '../../../testing';\n\nimport { map } from 'rxjs/operators';\n\n// re-export for tester convenience\nexport { Hero } from '../hero';\nexport { HeroService } from '../hero.service';\nexport { getTestHeroes } from './test-heroes';\n\nimport { Hero } from '../hero';\nimport { HeroService } from '../hero.service';\nimport { getTestHeroes } from './test-heroes';\n\n@Injectable()\n/**\n * FakeHeroService pretends to make real http requests.\n * implements only as much of HeroService as is actually consumed by the app\n */\nexport class TestHeroService extends HeroService {\n\n  constructor() {\n    // This is a fake testing service that won't be making HTTP\n    // requests so we can pass in `null` as the HTTP client.\n    super(null!);\n  }\n\n  heroes = getTestHeroes();\n  lastResult!: Observable<any>; // result from last method call\n\n  addHero(hero: Hero): Observable<Hero> {\n    throw new Error('Method not implemented.');\n  }\n\n  deleteHero(hero: number | Hero): Observable<Hero> {\n    throw new Error('Method not implemented.');\n  }\n\n  getHeroes(): Observable<Hero[]> {\n    return this.lastResult = asyncData(this.heroes);\n  }\n\n  getHero(id: number | string): Observable<Hero> {\n    if (typeof id === 'string') {\n      id = parseInt(id, 10);\n    }\n    const hero = this.heroes.find(h => h.id === id);\n    this.lastResult = asyncData(hero);\n    return this.lastResult;\n  }\n\n  updateHero(hero: Hero): Observable<Hero> {\n    return this.lastResult = this.getHero(hero.id).pipe(\n      map(h => {\n        if (h) {\n          return Object.assign(h, hero);\n        }\n        throw new Error(`Hero ${hero.id} not found`);\n      })\n    );\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}