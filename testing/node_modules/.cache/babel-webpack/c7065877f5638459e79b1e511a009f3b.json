{"ast":null,"code":"import { TestBed, waitForAsync } from '@angular/core/testing';\nimport { addMatchers, asyncData, click } from '../../testing';\nimport { HeroService } from '../model/hero.service';\nimport { getTestHeroes } from '../model/testing/test-heroes';\nimport { By } from '@angular/platform-browser';\nimport { Router } from '@angular/router';\nimport { DashboardComponent } from './dashboard.component';\nimport { DashboardModule } from './dashboard.module';\nbeforeEach(addMatchers);\nlet comp;\nlet fixture; ////////  Deep  ////////////////\n\ndescribe('DashboardComponent (deep)', () => {\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [DashboardModule]\n    });\n  });\n  compileAndCreate();\n  tests(clickForDeep);\n\n  function clickForDeep() {\n    // get first <div class=\"hero\">\n    const heroEl = fixture.nativeElement.querySelector('.hero');\n    click(heroEl);\n  }\n}); ////////  Shallow ////////////////\n\nimport { NO_ERRORS_SCHEMA } from '@angular/core';\ndescribe('DashboardComponent (shallow)', () => {\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      declarations: [DashboardComponent],\n      schemas: [NO_ERRORS_SCHEMA]\n    });\n  });\n  compileAndCreate();\n  tests(clickForShallow);\n\n  function clickForShallow() {\n    // get first <dashboard-hero> DebugElement\n    const heroDe = fixture.debugElement.query(By.css('dashboard-hero'));\n    heroDe.triggerEventHandler('selected', comp.heroes[0]);\n  }\n});\n/** Add TestBed providers, compile, and create DashboardComponent */\n\nfunction compileAndCreate() {\n  beforeEach(waitForAsync(() => {\n    const routerSpy = jasmine.createSpyObj('Router', ['navigateByUrl']);\n    const heroServiceSpy = jasmine.createSpyObj('HeroService', ['getHeroes']);\n    TestBed.configureTestingModule({\n      providers: [{\n        provide: HeroService,\n        useValue: heroServiceSpy\n      }, {\n        provide: Router,\n        useValue: routerSpy\n      }]\n    }).compileComponents().then(() => {\n      fixture = TestBed.createComponent(DashboardComponent);\n      comp = fixture.componentInstance; // getHeroes spy returns observable of test heroes\n\n      heroServiceSpy.getHeroes.and.returnValue(asyncData(getTestHeroes()));\n    });\n  }));\n}\n/**\n * The (almost) same tests for both.\n * Only change: the way that the first hero is clicked\n */\n\n\nfunction tests(heroClick) {\n  it('should NOT have heroes before ngOnInit', () => {\n    expect(comp.heroes.length).toBe(0, 'should not have heroes before ngOnInit');\n  });\n  it('should NOT have heroes immediately after ngOnInit', () => {\n    fixture.detectChanges(); // runs initial lifecycle hooks\n\n    expect(comp.heroes.length).toBe(0, 'should not have heroes until service promise resolves');\n  });\n  describe('after get dashboard heroes', () => {\n    let router; // Trigger component so it gets heroes and binds to them\n\n    beforeEach(waitForAsync(() => {\n      router = fixture.debugElement.injector.get(Router);\n      fixture.detectChanges(); // runs ngOnInit -> getHeroes\n\n      fixture.whenStable() // No need for the `lastPromise` hack!\n      .then(() => fixture.detectChanges()); // bind to heroes\n    }));\n    it('should HAVE heroes', () => {\n      expect(comp.heroes.length).toBeGreaterThan(0, 'should have heroes after service promise resolves');\n    });\n    it('should DISPLAY heroes', () => {\n      // Find and examine the displayed heroes\n      // Look for them in the DOM by css class\n      const heroes = fixture.nativeElement.querySelectorAll('dashboard-hero');\n      expect(heroes.length).toBe(4, 'should display 4 heroes');\n    });\n    it('should tell ROUTER to navigate when hero clicked', () => {\n      heroClick(); // trigger click on first inner <div class=\"hero\">\n      // args passed to router.navigateByUrl() spy\n\n      const spy = router.navigateByUrl;\n      const navArgs = spy.calls.first().args[0]; // expecting to navigate to id of the component's first hero\n\n      const id = comp.heroes[0].id;\n      expect(navArgs).toBe('/heroes/' + id, 'should nav to HeroDetail for first hero');\n    });\n  });\n}","map":{"version":3,"sources":["/Users/paulnguyen/Desktop/SRC/angular/testing/src/app/dashboard/dashboard.component.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { ComponentFixture, TestBed, waitForAsync } from '@angular/core/testing';\n\nimport { addMatchers, asyncData, click } from '../../testing';\nimport { HeroService } from '../model/hero.service';\nimport { getTestHeroes } from '../model/testing/test-heroes';\n\nimport { By } from '@angular/platform-browser';\nimport { Router } from '@angular/router';\n\nimport { DashboardComponent } from './dashboard.component';\nimport { DashboardModule } from './dashboard.module';\n\nbeforeEach(addMatchers);\n\nlet comp: DashboardComponent;\nlet fixture: ComponentFixture<DashboardComponent>;\n\n////////  Deep  ////////////////\n\ndescribe('DashboardComponent (deep)', () => {\n  beforeEach(() => {\n    TestBed.configureTestingModule({imports: [DashboardModule]});\n  });\n\n  compileAndCreate();\n\n  tests(clickForDeep);\n\n  function clickForDeep() {\n    // get first <div class=\"hero\">\n    const heroEl: HTMLElement = fixture.nativeElement.querySelector('.hero');\n    click(heroEl);\n  }\n});\n\n////////  Shallow ////////////////\n\nimport { NO_ERRORS_SCHEMA } from '@angular/core';\n\ndescribe('DashboardComponent (shallow)', () => {\n  beforeEach(() => {\n    TestBed.configureTestingModule(\n        {declarations: [DashboardComponent], schemas: [NO_ERRORS_SCHEMA]});\n  });\n\n  compileAndCreate();\n\n  tests(clickForShallow);\n\n  function clickForShallow() {\n    // get first <dashboard-hero> DebugElement\n    const heroDe = fixture.debugElement.query(By.css('dashboard-hero'));\n    heroDe.triggerEventHandler('selected', comp.heroes[0]);\n  }\n});\n\n/** Add TestBed providers, compile, and create DashboardComponent */\nfunction compileAndCreate() {\n  beforeEach(waitForAsync(() => {\n    const routerSpy = jasmine.createSpyObj('Router', ['navigateByUrl']);\n    const heroServiceSpy = jasmine.createSpyObj('HeroService', ['getHeroes']);\n\n    TestBed\n        .configureTestingModule({\n          providers: [\n            {provide: HeroService, useValue: heroServiceSpy}, {provide: Router, useValue: routerSpy}\n          ]\n        })\n        .compileComponents()\n        .then(() => {\n          fixture = TestBed.createComponent(DashboardComponent);\n          comp = fixture.componentInstance;\n\n          // getHeroes spy returns observable of test heroes\n          heroServiceSpy.getHeroes.and.returnValue(asyncData(getTestHeroes()));\n        });\n  }));\n}\n\n/**\n * The (almost) same tests for both.\n * Only change: the way that the first hero is clicked\n */\nfunction tests(heroClick: () => void) {\n\n  it('should NOT have heroes before ngOnInit', () => {\n    expect(comp.heroes.length).toBe(0, 'should not have heroes before ngOnInit');\n  });\n\n  it('should NOT have heroes immediately after ngOnInit', () => {\n    fixture.detectChanges();  // runs initial lifecycle hooks\n\n    expect(comp.heroes.length).toBe(0, 'should not have heroes until service promise resolves');\n  });\n\n  describe('after get dashboard heroes', () => {\n    let router: Router;\n\n     // Trigger component so it gets heroes and binds to them\n    beforeEach(waitForAsync(() => {\n      router = fixture.debugElement.injector.get(Router);\n      fixture.detectChanges(); // runs ngOnInit -> getHeroes\n      fixture.whenStable() // No need for the `lastPromise` hack!\n        .then(() => fixture.detectChanges()); // bind to heroes\n    }));\n\n    it('should HAVE heroes', () => {\n      expect(comp.heroes.length)\n          .toBeGreaterThan(0, 'should have heroes after service promise resolves');\n    });\n\n    it('should DISPLAY heroes', () => {\n      // Find and examine the displayed heroes\n      // Look for them in the DOM by css class\n      const heroes = fixture.nativeElement.querySelectorAll('dashboard-hero');\n      expect(heroes.length).toBe(4, 'should display 4 heroes');\n    });\n\n    it('should tell ROUTER to navigate when hero clicked', () => {\n      heroClick();  // trigger click on first inner <div class=\"hero\">\n\n      // args passed to router.navigateByUrl() spy\n      const spy = router.navigateByUrl as jasmine.Spy;\n      const navArgs = spy.calls.first().args[0];\n\n      // expecting to navigate to id of the component's first hero\n      const id = comp.heroes[0].id;\n      expect(navArgs).toBe('/heroes/' + id, 'should nav to HeroDetail for first hero');\n    });\n  });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}