{"ast":null,"code":"import { fakeAsync, TestBed, tick } from '@angular/core/testing';\nimport { cold, getTestScheduler } from 'jasmine-marbles';\nimport { TwainService } from './twain.service';\nimport { TwainComponent } from './twain.component';\ndescribe('TwainComponent (marbles)', () => {\n  let component;\n  let fixture;\n  let getQuoteSpy;\n  let quoteEl;\n  let testQuote; // Helper function to get the error message element value\n  // An *ngIf keeps it out of the DOM until there is an error\n\n  const errorMessage = () => {\n    const el = fixture.nativeElement.querySelector('.error');\n    return el ? el.textContent : null;\n  };\n\n  beforeEach(() => {\n    // Create a fake TwainService object with a `getQuote()` spy\n    const twainService = jasmine.createSpyObj('TwainService', ['getQuote']);\n    getQuoteSpy = twainService.getQuote;\n    TestBed.configureTestingModule({\n      declarations: [TwainComponent],\n      providers: [{\n        provide: TwainService,\n        useValue: twainService\n      }]\n    });\n    fixture = TestBed.createComponent(TwainComponent);\n    component = fixture.componentInstance;\n    quoteEl = fixture.nativeElement.querySelector('.twain');\n    testQuote = 'Test Quote';\n  }); // A synchronous test that simulates async behavior\n\n  it('should show quote after getQuote (marbles)', () => {\n    // observable test quote value and complete(), after delay\n    const q$ = cold('---x|', {\n      x: testQuote\n    });\n    getQuoteSpy.and.returnValue(q$);\n    fixture.detectChanges(); // ngOnInit()\n\n    expect(quoteEl.textContent).toBe('...', 'should show placeholder');\n    getTestScheduler().flush(); // flush the observables\n\n    fixture.detectChanges(); // update view\n\n    expect(quoteEl.textContent).toBe(testQuote, 'should show quote');\n    expect(errorMessage()).toBeNull('should not show error');\n  }); // Still need fakeAsync() because of component's setTimeout()\n\n  it('should display error when TwainService fails', fakeAsync(() => {\n    // observable error after delay\n    const q$ = cold('---#|', null, new Error('TwainService test failure'));\n    getQuoteSpy.and.returnValue(q$);\n    fixture.detectChanges(); // ngOnInit()\n\n    expect(quoteEl.textContent).toBe('...', 'should show placeholder');\n    getTestScheduler().flush(); // flush the observables\n\n    tick(); // component shows error after a setTimeout()\n\n    fixture.detectChanges(); // update error message\n\n    expect(errorMessage()).toMatch(/test failure/, 'should display error');\n    expect(quoteEl.textContent).toBe('...', 'should show placeholder');\n  }));\n});","map":{"version":3,"sources":["/Users/paulnguyen/Desktop/SRC/angular/testing/src/app/twain/twain.component.marbles.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { async, fakeAsync, ComponentFixture, TestBed, tick } from '@angular/core/testing';\n\nimport { cold, getTestScheduler } from 'jasmine-marbles';\n\nimport { TwainService } from './twain.service';\nimport { TwainComponent } from './twain.component';\n\n\ndescribe('TwainComponent (marbles)', () => {\n  let component: TwainComponent;\n  let fixture: ComponentFixture<TwainComponent>;\n  let getQuoteSpy: jasmine.Spy;\n  let quoteEl: HTMLElement;\n  let testQuote: string;\n\n  // Helper function to get the error message element value\n  // An *ngIf keeps it out of the DOM until there is an error\n  const errorMessage = () => {\n    const el = fixture.nativeElement.querySelector('.error');\n    return el ? el.textContent : null;\n  };\n\n  beforeEach(() => {\n    // Create a fake TwainService object with a `getQuote()` spy\n    const twainService = jasmine.createSpyObj('TwainService', ['getQuote']);\n    getQuoteSpy = twainService.getQuote;\n\n    TestBed.configureTestingModule({\n      declarations: [ TwainComponent ],\n      providers:    [\n        { provide: TwainService, useValue: twainService }\n      ]\n    });\n\n    fixture = TestBed.createComponent(TwainComponent);\n    component = fixture.componentInstance;\n    quoteEl = fixture.nativeElement.querySelector('.twain');\n    testQuote = 'Test Quote';\n  });\n\n  // A synchronous test that simulates async behavior\n  it('should show quote after getQuote (marbles)', () => {\n    // observable test quote value and complete(), after delay\n    const q$ = cold('---x|', { x: testQuote });\n    getQuoteSpy.and.returnValue( q$ );\n\n    fixture.detectChanges(); // ngOnInit()\n    expect(quoteEl.textContent).toBe('...', 'should show placeholder');\n\n    getTestScheduler().flush(); // flush the observables\n\n    fixture.detectChanges(); // update view\n\n    expect(quoteEl.textContent).toBe(testQuote, 'should show quote');\n    expect(errorMessage()).toBeNull('should not show error');\n  });\n\n  // Still need fakeAsync() because of component's setTimeout()\n  it('should display error when TwainService fails', fakeAsync(() => {\n    // observable error after delay\n    const q$ = cold('---#|', null, new Error('TwainService test failure'));\n    getQuoteSpy.and.returnValue( q$ );\n\n    fixture.detectChanges(); // ngOnInit()\n    expect(quoteEl.textContent).toBe('...', 'should show placeholder');\n\n    getTestScheduler().flush(); // flush the observables\n    tick();                     // component shows error after a setTimeout()\n    fixture.detectChanges();    // update error message\n\n    expect(errorMessage()).toMatch(/test failure/, 'should display error');\n    expect(quoteEl.textContent).toBe('...', 'should show placeholder');\n  }));\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}